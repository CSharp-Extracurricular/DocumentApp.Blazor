@page "/edit/{currentPublicationIdString}"

@inject HttpClient Http
@inject NavigationManager Nav

<PageTitle>Редактирование публикации</PageTitle>
<PageHeader>Редактирование публикации</PageHeader>

<PublicationEditor @bind-BindingValue="_publication">
    <button class="add-publication-button" @onclick="async () => await AddPublication()">Сохранить изменения</button>
</PublicationEditor>

@code
{
    private const string PageAfterAddition = "";

    private PublicationDto _publication = new();

    private async Task AddPublication()
    {
        await SendPutRequest(_publication);
        Nav.NavigateTo(PageAfterAddition);
    }

    [Parameter]
    public string? currentPublicationIdString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(currentPublicationIdString))
        {
            if (Guid.TryParse(currentPublicationIdString, out _))
            {
                _publication = await Http.GetFromJsonAsync<PublicationDto>($"https://localhost:7204/api/View/{currentPublicationIdString}") ?? null!;
            }
            else
            {
                throw new Exception("Guid parsing error");
            }
        }
        else
        {
            throw new Exception("Publication Guid not found");
        }
    }

    private async Task SendPutRequest(PublicationDto publicationDto) => await Http.PutAsJsonAsync("https://localhost:7204/api/Edit/", publicationDto);
}
