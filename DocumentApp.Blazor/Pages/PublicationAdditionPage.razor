@page "/add"

@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using DocumentApp.DTO

<PageTitle>Добавление публикации</PageTitle>

<div>
    <h3>Основная информация</h3>

    <p>Название</p>
    <input @bind="title"/>

    <p>Год публикации</p>
    <input @bind="publishingYear"/>

    <p>Тип публикации</p>
    <select @bind="publicationType">
        @foreach (var _publicationType in Enum.GetValues(typeof(PublicationType)))
        {
            <option value="@_publicationType">@_publicationType</option>
        }
    </select>

    <h3>Авторы</h3>

    <p>Фамилия</p>
    <input @bind="currentLastName" />

    <p>Имя</p>
    <input @bind="currentFirstName"/>

    <p>Отчество</p>
    <input @bind="currentPatronimicName" />

    <p>E-mail</p>
    <input @bind="currentEmail"/>

    <p>Добавленные авторы</p>

    <ul>
        @foreach (Author author in authors)
        {
            <li>
                @author.LastName @author.FirstName @author.PatronimicName
                <button @onclick="() => RemoveAuthor(author)">Удалить автора</button>
            </li>
        }
    </ul>
    
    <button @onclick="AddAuthor">Добавить автора</button>

    <h3>Индексация</h3>

    <p>Индексатор</p>
    <select @bind="currentIndexator">
        @foreach (var indexatorType in Enum.GetValues(typeof(Indexator)))
        {
            <option value="@indexatorType">@indexatorType</option>
        }
    </select>

    <p>URL записи об индексе</p>
    <input type="url" @bind="currentURL"/>

    <p>Добавленные записи об индексе</p>

    <ul>
        @foreach (CitationIndex index in indices)
        {
            <li>
                @Enum.GetName(index.Indexator) 
                @index.URL
                <button @onclick="() => RemoveIndex(index)">Удалить запись об индексе</button>
            </li>
        }
    </ul>

    <button @onclick="AddIndex">Добавить индекс</button>

    <h3>Представление на конференции</h3>

    <p>Краткое название</p>
    <input @bind="currentShortName" />

    <p>Полное название</p>
    <input @bind="currentFullName" />

    <p>Дата начала</p>
    <input type="date" @bind="currentStartDate" />

    <p>Дата окончания</p>
    <input type="date" @bind="currentEndDate" />

    <p>Тип конференции</p>
    <select @bind="currentType">
        @foreach (var conferenceType in Enum.GetValues(typeof(ConferenceType)))
        {
            <option value="@conferenceType">@conferenceType</option>
        }
    </select>

    <p>Место проведения</p>
    <input @bind="currentLocation" />

    <button @onclick="AddConference">Добавить конференцию</button>

    @if (conference != null)
    {
        <p>@conference.ShortName</p>
        <button @onclick="RemoveConference">Удалить конференцию</button>
    }
</div>

<div>
    <button @onclick="AddPublication">Добавить</button>
</div>

@code
{
    public List<Author> authors = new();
    public List<CitationIndex> indices = new();
    public Conference conference = null!;

    public string title { get; set; } = string.Empty;
    public int publishingYear { get; set; }
    public PublicationType publicationType { get; set; }

    public string currentFirstName { get; set; } = string.Empty;
    public string currentLastName { get; set; } = string.Empty;
    public string? currentPatronimicName { get; set; }
    public string currentEmail { get; set; } = string.Empty;

    public Indexator currentIndexator { get; set; }
    public string currentURL { get; set; } = string.Empty;

    public string currentShortName { get; set; } = string.Empty;
    public string currentFullName { get; set; } = string.Empty;
    public DateTime currentStartDate { get; set; } = DateTime.Now;
    public DateTime currentEndDate { get; set; } = DateTime.Now;
    public ConferenceType currentType { get; set; }
    public string currentLocation { get; set; } = string.Empty;

    public void AddAuthor()
    {
        Author author = new()
        {
            Id = Guid.NewGuid(),
            FirstName = currentFirstName,
            LastName = currentLastName,
            PatronimicName = currentPatronimicName,
            Email = currentEmail
        };

        authors.Add(author);

        currentFirstName = string.Empty;
        currentLastName = string.Empty;
        currentPatronimicName = string.Empty;
        currentEmail = string.Empty;
    } 

    public void RemoveAuthor(Author author)
    {
        if (authors.Contains(author))
        {
            authors.Remove(author);
        }
        else
        {
            throw new NullReferenceException();
        }
    }

    public void AddIndex()
    {
        CitationIndex index = new()
        {
            Indexator = currentIndexator,
            URL = new Uri(currentURL)
        };

        indices.Add(index);

        currentURL = null!;
    }

    public void RemoveIndex(CitationIndex index)
    {
        if (indices.Contains(index))
        {
            indices.Remove(index);
        }
        else
        {
            throw new NullReferenceException();
        }
    }

    public void AddConference()
    {
        conference = new()
        {
            Id = Guid.NewGuid(),
            ShortName = currentShortName,
            FullName = currentFullName,
            StartDate = currentStartDate,
            EndDate = currentEndDate,
            Type = currentType,
            Location = currentLocation
        };
    }

    public void RemoveConference()
    {
        conference = null!;
        currentShortName = string.Empty;
        currentFullName = string.Empty;
        currentStartDate = DateTime.Now;
        currentEndDate = DateTime.Now;
        currentLocation = string.Empty;
    }

    public async void AddPublication()
    {
        Publication publication = new()
        {
            Id = Guid.NewGuid(),
            Title = title,
            PublishingYear = publishingYear,
            PublicationType = publicationType
        };

        foreach (Author author in authors)
        {
            author.Publication = publication;
            author.PublicationId = publication.Id;
            publication.Authors.Add(author);
        }

        foreach (CitationIndex index in indices)
        {
            index.Publication = publication;
            index.PublicationId = publication.Id;
            publication.CitationIndices.Add(index);
        }

        if (conference != null)
        {
            conference.Publication = publication;
            conference.PublicationId = publication.Id;
            publication.Conference = conference;
        }

        await SendPostRequestWithBodyAsync(publication);
    }

    public async Task SendPostRequestWithBodyAsync(Publication publication) 
        => await Http.PostAsJsonAsync<PublicationDto>("https://localhost:7204/api/Edit", DtoConverter.Convert(publication));
}