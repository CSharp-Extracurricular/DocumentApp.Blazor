@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Text
@using System.Threading.Tasks
@using DocumentApp.DTO
@using DocumentApp.Domain
@inject NavigationManager Nav

<input type="checkbox" name="filter-toggle" id="filter-toggle" value="" @bind="isFilterMenuShown">
<label class="title__filter" for="filter-toggle"> Фильтр </label>

<div id="filter-container" class="block__info">
    <div class="filter-field">
        <p>Начальный год</p>
        <input type="text" @bind="startYear"/></div>
    <div class="filter-field">
        <p>Конечный год</p>
        <input type="text" @bind="endYear"/></div>
    <div class="filter-field">
        <p>Тип публикации</p>
        <select class="block__info__selector" @bind="publicationType">
            <option value="" @onclick="() => publicationType = null">All</option>
            @foreach (var _publicationType in Enum.GetValues(typeof(PublicationType)))
            {
                <option value="@_publicationType">@_publicationType</option>
            }
        </select>
    </div>
    <div class="filter-field">
        <button class="filter-button" @onclick="@SearchIssues">
            <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
        </button>
        <button class="filter-button" @onclick="@ClearSearch">
            <span class="oi oi-x" aria-hidden="true"></span>
        </button>
    </div>
</div>

<hr/>

@if (fulfil && !_publications.Any())
{
    <p>Публикации отсутствуют.</p>
}
else if (!fulfil)
{
    <p>Идет загрузка...</p>
}

@if (_publications.Any())
{
    <div class="main-wrap">
        <div class="publication-cards-main-column">
            <ul class="publication-cards-container">
                @foreach (var publication in _publications)
                {
                    <li>
                        <div class="publication-card">
                            <div class="publication-card-title">
                                @publication.Title
                            </div>
                            <div class="publication-card-author">
                                @foreach (Author author in publication.Authors)
                                {
                                    <span>
                                        @(author.LastName) @(author.FirstName) @(author.PatronimicName)
                                        @if (publication.Authors.IndexOf(author) != publication.Authors.Count - 1)
                                        {
                                            <span>, </span>
                                        }
                                    </span>
                                }
                            </div>
                            <div class="publication-card-year">
                                @publication.PublishingYear
                            </div>
                            <div class="publication-card-actions">
                                <button @onclick="async () => await DeletePublication(publication)">
                                    <span class="oi oi-trash" aria-hidden="true"></span>
                                </button>
                                <button @onclick="@(() => Nav.NavigateTo($"/edit/{publication.Id}"))">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                </button>
                                <button @onclick="() => ShowPublication(publication)">
                                    <span class="oi oi-eye" aria-hidden="true"></span>
                                </button>
                            </div>
                        </div>
                    </li>
                }
            </ul>
            <button class="add-publication-button" @onclick="@(()=>Nav.NavigateTo("/add"))">Добавить публикацию</button>
        </div>
        @if (isPreviewShown)
        {
            <div class="publication-cards-preview-wrap">
                <PublicationPreview PublicationId="previewGuid" />
                <button class="publication-close-preview-button" @onclick="ClosePreview">
                    <span class="oi oi-x" aria-hidden="true"></span>
                </button>
            </div>
        }
    </div>
}

@code
{
    private const int QueryStringMaxLength = 88;

    private List<Publication> _publications = new();
    private bool fulfil = false;

    private bool isPreviewShown = false;
    private Guid previewGuid;

    private bool isFilterMenuShown = false;

    private void ShowPublication(Publication publication)
    {
        previewGuid = publication.Id;
        isPreviewShown = true;
    }

    private void ClosePreview()
    {
        isPreviewShown = false;
    }

    protected override async Task OnInitializedAsync()
    {
        IEnumerable<PublicationDto> result = await Http.GetFromJsonAsync<IEnumerable<PublicationDto>>("https://localhost:7204/api/View") ?? null!;

        foreach (PublicationDto publicationDto in result)
        {
            _publications.Add(DtoConverter.ConvertToNative(publicationDto));
        }

        fulfil = true;
    }

    public async Task DeletePublication(Publication publication)
    {
        await Http.DeleteAsync($"https://localhost:7204/api/Edit/{publication.Id.ToString()}");
        _publications.Remove(publication);
    }

    private int? startYear = null;
    private int? endYear = null;
    private PublicationType? publicationType = null;

    public async Task SearchIssues()
    {
        _publications.Clear();
        string query = GetQueryString(startYear, endYear, publicationType);
        IEnumerable<PublicationDto> result = await Http.GetFromJsonAsync<IEnumerable<PublicationDto>>(query) ?? null!;

        foreach (PublicationDto publicationDto in result)
        {
            _publications.Add(DtoConverter.ConvertToNative(publicationDto));
        }
    }

    public async Task ClearSearch()
    {
        _publications.Clear();
        await OnInitializedAsync();
    }

    public string GetQueryString(int? start, int? end, PublicationType? type) 
        => $"https://localhost:7204/api/View/filter?StartYear={start}&EndYear={end}&PublicationType={(int?)publicationType}";
}